/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedAdminImport } from './routes/_authenticated/_admin'
import { Route as AuthenticatedUsersIndexImport } from './routes/_authenticated/users/index'
import { Route as AuthenticatedContentIndexImport } from './routes/_authenticated/content/index'
import { Route as AuthenticatedUsersIdImport } from './routes/_authenticated/users/$id'
import { Route as AuthenticatedContentNewImport } from './routes/_authenticated/content/new'
import { Route as AuthenticatedContentIdImport } from './routes/_authenticated/content/$id'
import { Route as AuthenticatedAdminPanelImport } from './routes/_authenticated/_admin/panel'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedAdminRoute = AuthenticatedAdminImport.update({
  id: '/_admin',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedContentIndexRoute = AuthenticatedContentIndexImport.update({
  id: '/content/',
  path: '/content/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedUsersIdRoute = AuthenticatedUsersIdImport.update({
  id: '/users/$id',
  path: '/users/$id',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedContentNewRoute = AuthenticatedContentNewImport.update({
  id: '/content/new',
  path: '/content/new',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedContentIdRoute = AuthenticatedContentIdImport.update({
  id: '/content/$id',
  path: '/content/$id',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedAdminPanelRoute = AuthenticatedAdminPanelImport.update({
  id: '/panel',
  path: '/panel',
  getParentRoute: () => AuthenticatedAdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_admin': {
      id: '/_authenticated/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedAdminImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_admin/panel': {
      id: '/_authenticated/_admin/panel'
      path: '/panel'
      fullPath: '/panel'
      preLoaderRoute: typeof AuthenticatedAdminPanelImport
      parentRoute: typeof AuthenticatedAdminImport
    }
    '/_authenticated/content/$id': {
      id: '/_authenticated/content/$id'
      path: '/content/$id'
      fullPath: '/content/$id'
      preLoaderRoute: typeof AuthenticatedContentIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/content/new': {
      id: '/_authenticated/content/new'
      path: '/content/new'
      fullPath: '/content/new'
      preLoaderRoute: typeof AuthenticatedContentNewImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users/$id': {
      id: '/_authenticated/users/$id'
      path: '/users/$id'
      fullPath: '/users/$id'
      preLoaderRoute: typeof AuthenticatedUsersIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/content/': {
      id: '/_authenticated/content/'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof AuthenticatedContentIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedAdminRouteChildren {
  AuthenticatedAdminPanelRoute: typeof AuthenticatedAdminPanelRoute
}

const AuthenticatedAdminRouteChildren: AuthenticatedAdminRouteChildren = {
  AuthenticatedAdminPanelRoute: AuthenticatedAdminPanelRoute,
}

const AuthenticatedAdminRouteWithChildren =
  AuthenticatedAdminRoute._addFileChildren(AuthenticatedAdminRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedAdminRoute: typeof AuthenticatedAdminRouteWithChildren
  AuthenticatedContentIdRoute: typeof AuthenticatedContentIdRoute
  AuthenticatedContentNewRoute: typeof AuthenticatedContentNewRoute
  AuthenticatedUsersIdRoute: typeof AuthenticatedUsersIdRoute
  AuthenticatedContentIndexRoute: typeof AuthenticatedContentIndexRoute
  AuthenticatedUsersIndexRoute: typeof AuthenticatedUsersIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAdminRoute: AuthenticatedAdminRouteWithChildren,
  AuthenticatedContentIdRoute: AuthenticatedContentIdRoute,
  AuthenticatedContentNewRoute: AuthenticatedContentNewRoute,
  AuthenticatedUsersIdRoute: AuthenticatedUsersIdRoute,
  AuthenticatedContentIndexRoute: AuthenticatedContentIndexRoute,
  AuthenticatedUsersIndexRoute: AuthenticatedUsersIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedAdminRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/panel': typeof AuthenticatedAdminPanelRoute
  '/content/$id': typeof AuthenticatedContentIdRoute
  '/content/new': typeof AuthenticatedContentNewRoute
  '/users/$id': typeof AuthenticatedUsersIdRoute
  '/content': typeof AuthenticatedContentIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedAdminRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/panel': typeof AuthenticatedAdminPanelRoute
  '/content/$id': typeof AuthenticatedContentIdRoute
  '/content/new': typeof AuthenticatedContentNewRoute
  '/users/$id': typeof AuthenticatedUsersIdRoute
  '/content': typeof AuthenticatedContentIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/_authenticated/_admin': typeof AuthenticatedAdminRouteWithChildren
  '/_authenticated/_admin/panel': typeof AuthenticatedAdminPanelRoute
  '/_authenticated/content/$id': typeof AuthenticatedContentIdRoute
  '/_authenticated/content/new': typeof AuthenticatedContentNewRoute
  '/_authenticated/users/$id': typeof AuthenticatedUsersIdRoute
  '/_authenticated/content/': typeof AuthenticatedContentIndexRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/panel'
    | '/content/$id'
    | '/content/new'
    | '/users/$id'
    | '/content'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/panel'
    | '/content/$id'
    | '/content/new'
    | '/users/$id'
    | '/content'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/about'
    | '/login'
    | '/_authenticated/_admin'
    | '/_authenticated/_admin/panel'
    | '/_authenticated/content/$id'
    | '/_authenticated/content/new'
    | '/_authenticated/users/$id'
    | '/_authenticated/content/'
    | '/_authenticated/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/about",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/_admin",
        "/_authenticated/content/$id",
        "/_authenticated/content/new",
        "/_authenticated/users/$id",
        "/_authenticated/content/",
        "/_authenticated/users/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authenticated/_admin": {
      "filePath": "_authenticated/_admin.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/_admin/panel"
      ]
    },
    "/_authenticated/_admin/panel": {
      "filePath": "_authenticated/_admin/panel.tsx",
      "parent": "/_authenticated/_admin"
    },
    "/_authenticated/content/$id": {
      "filePath": "_authenticated/content/$id.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/content/new": {
      "filePath": "_authenticated/content/new.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users/$id": {
      "filePath": "_authenticated/users/$id.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/content/": {
      "filePath": "_authenticated/content/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users/": {
      "filePath": "_authenticated/users/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
